// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const channelById = `-- name: ChannelById :one
select id, name from channels where id = $1
`

func (q *Queries) ChannelById(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRow(ctx, channelById, id)
	var i Channel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const channelsByAdmin = `-- name: ChannelsByAdmin :many
select id, chat_id, channels_id from channels_admins where chat_id = $1
`

func (q *Queries) ChannelsByAdmin(ctx context.Context, chatID pgtype.Int8) ([]ChannelsAdmin, error) {
	rows, err := q.db.Query(ctx, channelsByAdmin, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelsAdmin
	for rows.Next() {
		var i ChannelsAdmin
		if err := rows.Scan(&i.ID, &i.ChatID, &i.ChannelsID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteChannel = `-- name: DeleteChannel :exec
delete from channels where id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChannel, id)
	return err
}

const deleteChannelAdmins = `-- name: DeleteChannelAdmins :exec
delete from channels_admins where id = $1
`

func (q *Queries) DeleteChannelAdmins(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChannelAdmins, id)
	return err
}

const deleteChannelAdminsByChannelId = `-- name: DeleteChannelAdminsByChannelId :exec
delete from channels_admins where channels_id = $1
`

func (q *Queries) DeleteChannelAdminsByChannelId(ctx context.Context, channelsID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteChannelAdminsByChannelId, channelsID)
	return err
}

const deleteListAdminsChannelRequest = `-- name: DeleteListAdminsChannelRequest :exec
delete from admins_of_channels_request where id = $1
`

func (q *Queries) DeleteListAdminsChannelRequest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteListAdminsChannelRequest, id)
	return err
}

const deleteListAdminsChannelRequestByChannelAndChatId = `-- name: DeleteListAdminsChannelRequestByChannelAndChatId :exec
delete from admins_of_channels_request where channels_id = $1 and chat_id = $2
`

type DeleteListAdminsChannelRequestByChannelAndChatIdParams struct {
	ChannelsID pgtype.Int4
	ChatID     pgtype.Int8
}

func (q *Queries) DeleteListAdminsChannelRequestByChannelAndChatId(ctx context.Context, arg DeleteListAdminsChannelRequestByChannelAndChatIdParams) error {
	_, err := q.db.Exec(ctx, deleteListAdminsChannelRequestByChannelAndChatId, arg.ChannelsID, arg.ChatID)
	return err
}

const deleteListAdminsChannelRequestByChannelId = `-- name: DeleteListAdminsChannelRequestByChannelId :exec
delete from admins_of_channels_request where channels_id = $1
`

func (q *Queries) DeleteListAdminsChannelRequestByChannelId(ctx context.Context, channelsID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteListAdminsChannelRequestByChannelId, channelsID)
	return err
}

const deleteSubscriptionToChannel = `-- name: DeleteSubscriptionToChannel :exec
delete from subscription_to_channels where id = $1
`

func (q *Queries) DeleteSubscriptionToChannel(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubscriptionToChannel, id)
	return err
}

const deleteSubscriptionToChannelByChannelId = `-- name: DeleteSubscriptionToChannelByChannelId :exec
delete from subscription_to_channels where channels_id = $1
`

func (q *Queries) DeleteSubscriptionToChannelByChannelId(ctx context.Context, channelsID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteSubscriptionToChannelByChannelId, channelsID)
	return err
}

const insertChannelAdmins = `-- name: InsertChannelAdmins :exec

insert into channels_admins (id, chat_id, channels_id) VALUES (default, $1, $2)
`

type InsertChannelAdminsParams struct {
	ChatID     pgtype.Int8
	ChannelsID pgtype.Int4
}

// --------GROUP LIST ADMINS----------
func (q *Queries) InsertChannelAdmins(ctx context.Context, arg InsertChannelAdminsParams) error {
	_, err := q.db.Exec(ctx, insertChannelAdmins, arg.ChatID, arg.ChannelsID)
	return err
}

const insertListAdminsChannelRequest = `-- name: InsertListAdminsChannelRequest :exec
insert into admins_of_channels_request (id, chat_id, channels_id, first_name, second_name, username) VALUES (default, $1, $2, $3, $4, $5)
`

type InsertListAdminsChannelRequestParams struct {
	ChatID     pgtype.Int8
	ChannelsID pgtype.Int4
	FirstName  pgtype.Text
	SecondName pgtype.Text
	Username   pgtype.Text
}

func (q *Queries) InsertListAdminsChannelRequest(ctx context.Context, arg InsertListAdminsChannelRequestParams) error {
	_, err := q.db.Exec(ctx, insertListAdminsChannelRequest,
		arg.ChatID,
		arg.ChannelsID,
		arg.FirstName,
		arg.SecondName,
		arg.Username,
	)
	return err
}

const insertNewChannel = `-- name: InsertNewChannel :exec
insert into channels (id, name) VALUES (default, $1)
`

func (q *Queries) InsertNewChannel(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertNewChannel, name)
	return err
}

const insertSubscriptionToChannel = `-- name: InsertSubscriptionToChannel :exec

insert into subscription_to_channels (id, chat_id, channels_id, username, title, chat_type) VALUES (default, $1, $2, $3, $4, $5)
`

type InsertSubscriptionToChannelParams struct {
	ChatID     pgtype.Int8
	ChannelsID pgtype.Int4
	Username   pgtype.Text
	Title      pgtype.Text
	ChatType   pgtype.Text
}

// --------SUBSCRIPTIONS TO GROUP LIST----------
func (q *Queries) InsertSubscriptionToChannel(ctx context.Context, arg InsertSubscriptionToChannelParams) error {
	_, err := q.db.Exec(ctx, insertSubscriptionToChannel,
		arg.ChatID,
		arg.ChannelsID,
		arg.Username,
		arg.Title,
		arg.ChatType,
	)
	return err
}

const listAdminsChannelRequest = `-- name: ListAdminsChannelRequest :many

select id, chat_id, channels_id, username, first_name, second_name from admins_of_channels_request order by id
`

// --------REQUEST----------
func (q *Queries) ListAdminsChannelRequest(ctx context.Context) ([]AdminsOfChannelsRequest, error) {
	rows, err := q.db.Query(ctx, listAdminsChannelRequest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminsOfChannelsRequest
	for rows.Next() {
		var i AdminsOfChannelsRequest
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.ChannelsID,
			&i.Username,
			&i.FirstName,
			&i.SecondName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChannels = `-- name: ListChannels :many
select id, name from channels order by name
`

func (q *Queries) ListChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.Query(ctx, listChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscriptionToChannels = `-- name: SubscriptionToChannels :many
select id, chat_id, channels_id, username, title, chat_type from subscription_to_channels
`

func (q *Queries) SubscriptionToChannels(ctx context.Context) ([]SubscriptionToChannel, error) {
	rows, err := q.db.Query(ctx, subscriptionToChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionToChannel
	for rows.Next() {
		var i SubscriptionToChannel
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.ChannelsID,
			&i.Username,
			&i.Title,
			&i.ChatType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscriptionToChannelsByChannelId = `-- name: SubscriptionToChannelsByChannelId :many
select id, chat_id, channels_id, username, title, chat_type from subscription_to_channels where channels_id = $1
`

func (q *Queries) SubscriptionToChannelsByChannelId(ctx context.Context, channelsID pgtype.Int4) ([]SubscriptionToChannel, error) {
	rows, err := q.db.Query(ctx, subscriptionToChannelsByChannelId, channelsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionToChannel
	for rows.Next() {
		var i SubscriptionToChannel
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.ChannelsID,
			&i.Username,
			&i.Title,
			&i.ChatType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscriptionToChannelsByChatId = `-- name: SubscriptionToChannelsByChatId :many
select id, chat_id, channels_id, username, title, chat_type from subscription_to_channels where chat_id = $1
`

func (q *Queries) SubscriptionToChannelsByChatId(ctx context.Context, chatID pgtype.Int8) ([]SubscriptionToChannel, error) {
	rows, err := q.db.Query(ctx, subscriptionToChannelsByChatId, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionToChannel
	for rows.Next() {
		var i SubscriptionToChannel
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.ChannelsID,
			&i.Username,
			&i.Title,
			&i.ChatType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
